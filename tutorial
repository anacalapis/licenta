instalarea mediului necesar pentru ca o placa ESP32 sa fie vizibila in Arduino IDE 

-de pe site-ul "https://www.silabs.com/developer-tools/usb-to-uart-bridge-vcp-drivers?tab=downloads" se va descarca "CP210x VCP Windows"
-se va dezarviha si se va rula "CP210xVCPInstaller_x64"
-in Arduino IDE vor trebui adaugate 2 path-uri in:
	File -> Preferences -> Additional boards .... -> 
		path1 : "https://dl.espressif.com/dl/package_esp32_index.json"
		path2 : "https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json"
-placa ce trebuie selectata (ESP32 DevModule) se gaseste la
	Tools -> Boards -> esp32 ->  ESP32 DevModule


comunicarea ESP-> Raspberry (am folosit urmatorul tutorial: https://www.youtube.com/watch?v=olU8ICQgG94)

-am instalat biblioteca "ESP32 BLE Arduino" in Arduino IDE
-am rulat codul "find_MAC_address_for_ESP.ino" pentru a gasi adresa MAC pt a face asocierea cu Raspberry-ul
-daca se primeste eroarea "Hard resetting via RTS pin..." se apasa butonul EN (reset) de pe ESP
-cu adresa MAC stiuta, se deschide iconita de pe Raspberry de Bluetooth si se fac urm pasi
	Add device -> ESP32-BT-Slave -> se da hover ca sa se verifice adresa MAC -> pair
-se intra in env cu comanda "source env_licenta/bin/activate"
-se instaleaza biblioteca "pybluez" cu urm comenzi:
	sudo apt-get update
	sudo apt-get install libbluetooth-dev
	pip3 install git+https://github.com/pybluez/pybluez.git
	pip3 install pybluez
-pentru a testa comunicarea se face un fisier .py (nu e necesar sa se faca in env)
-trebuie sa ajungem in directorul curent si sa rulam fisierul
	python nume_fis.py
-codul meu pentru testare este "test_find_esp.py". Daca se va afisa adresa MAC, este perfect
-pentru a testa daca comunicare bidirectionala este ok, se va folosi "com_bidirectionala.py"
-!atentie: doar una din functiile "input_and_send()" sau "rx_and_echo()" sa putea fi vizibila, cealalta se va comenta
-trebuie deschis un serial monitor din Arduino IDE pentru a se realiza conectarea

